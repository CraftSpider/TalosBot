"""
    Stub file for Talos commands

    author: CraftSpider
"""
from typing import Tuple, List, Dict, Optional, Pattern, Sequence
import logging
import asyncio
import discord.ext.commands as commands
import datetime as dt
import spidertools.common as utils
import spidertools.discord as dutils
from discord_talos.talos import Talos

active_pw: Dict[int, utils.PW] = ...
log: logging.Logger = ...

def sort_mem(member: utils.PWMember) -> dt.timedelta: ...

def strfdelta(time_delta: dt.timedelta, fmt: str) -> str: ...

def html_to_markdown(html_text: str) -> str: ...

def _parse_latex_out(output: str) -> Dict[str, List[str]]: ...

class WWTimeConverter(commands.Converter):

    REG: Pattern = ...

    async def convert(self, ctx: commands.Context, argument: str) -> int: ...

class Commands(dutils.TalosCog):

    active_wws: Dict[int, asyncio.Task] = ...

    noun: Sequence[str] = ...
    adjective: Sequence[str] = ...
    goal: Sequence[str] = ...
    obstacle: Sequence[str] = ...
    place: Sequence[str] = ...
    place_adjective: Sequence[str] = ...
    action: Sequence[str] = ...
    place_action: Sequence[str] = ...
    phrases: Sequence[str] = ...
    nano_facts: Sequence[str] = ...

    def get_uptime_days(self) -> str: ...

    def get_uptime_percent(self) -> Tuple[float, float, float]: ...

    async def information(self, ctx: commands.Context) -> None: ...

    async def latex(self, ctx: commands.Context, latex: str) -> None: ...

    async def tos(self, ctx: commands.Context) -> None: ...

    async def version(self, ctx: commands.Context) -> None: ...

    async def roll(self, ctx: commands.Context, dice: str) -> None: ...

    async def choose(self, ctx: commands.Context, *, choices: str) -> None: ...

    async def time(self, ctx: commands.Context, timezone: Optional[str] = ...) -> None: ...

    @commands.group()
    async def wordwar(self, ctx: commands.Context, length: str, start: Optional[str] = ..., wpm: int = ..., name: str = ...) -> None: ...

    async def _cancel(self, ctx: commands.Context, name: str) -> None: ...

    async def credits(self, ctx: commands.Context) -> None: ...

    async def uptime(self, ctx: commands.Context) -> None: ...

    async def ping(self, ctx: commands.Context) -> None: ...

    @commands.group()
    async def nanowrimo(self, ctx: commands.Context) -> None: ...

    async def _information(self, ctx: commands.Context) -> None: ...

    async def _novel(self, ctx: commands.Context, username: str, novel_name: str = ...) -> None: ...

    async def _profile(self, ctx: commands.Context, username: str) -> None: ...

    @commands.group()
    async def generate(self, ctx: commands.Context) -> None: ...

    async def _crawl(self, ctx: commands.Context) -> None: ...

    async def _prompt(self, ctx:commands.Context) -> None: ...

    async def _name(self, ctx: commands.Context, number: int = ...) -> None: ...

    @commands.group()
    async def productivitywar(self, ctx: commands.Context) -> None: ...

    async def _create(self, ctx: commands.Context) -> None: ...

    async def _dump(self, ctx: commands.Context) -> None: ...

    async def _end(self, ctx: commands.Context) -> None: ...

    async def _join(self, ctx: commands.Context) -> None: ...

    async def _leave(self, ctx: commands.Context) -> None: ...

    async def _start(self, ctx: commands.Context, time: str = ...) -> None: ...

    @commands.group()
    async def quote(self, ctx: commands.Context, author: str = ..., *, quote: str = ...) -> None: ...

    async def _q_add(self, ctx: commands.Context, author: str, *, quote: str) -> None: ...

    async def _q_remove(self, ctx: commands.Context, num: int) -> None: ...

    async def _q_list(self, ctx: commands.Context, page: int = ...) -> None: ...

def setup(bot: Talos) -> None: ...
