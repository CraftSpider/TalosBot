
from typing import Dict, Callable, Any, Tuple, Iterable, Mapping
import pathlib
import aiohttp.web as web
import types

BACKUP_ERROR: str = ...
KNOWN_MIMES: Dict[str, str] = ...

def _module_from_file(path: pathlib.Path, base: pathlib.Path = ...) -> types.ModuleType: ...

def _resolve_args(func: Callable, possible: Dict[str, Any]) -> Tuple[Iterable[Any], Mapping[str, Any]]: ...

class BaseHandler:

    __slots__ = ("app",)

    app: web.Application

    def __init__(self, app: web.Application) -> None: ...

    async def get_path(self, path: str) -> pathlib.Path: ...

    async def guess_mime(self, path: pathlib.Path) -> str: ...

    async def error_code(self, status: int, error: Exception = ...) -> web.Response: ...

    async def backup_error_code(self, old_code: int, new_code: int, error: Exception = ...) -> web.Response: ...

    async def python_page(self, path: pathlib.Path, status: int = ..., *, request: web.Request = ...) -> web.Response: ...

    async def get_response(self, path: pathlib.Path, status: int = ..., *, request: web.Request = ...) -> web.Response: ...
