
from typing import Optional, Any, Dict, Iterable, List
import types
import utils
import utils.dutils as dutils
import discord
import discord.ext.commands as commands

from utils.dutils import paginators
from discord_talos.talos import Talos


class ExtendedBot(commands.Bot):

    all_events: Dict[str, dutils.EventLoop]
    extensions: types.MappingProxyType

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

    def add_cog(self, cog: Any) -> None: ...

    def remove_cog(self, name: str) -> None: ...

    def load_extension(self, name: str, prefix: bool = ...) -> None: ...

    def unload_extension(self, name: str, prefix: bool = ...) -> None: ...

    def run(self, token: str, *args: Any, **kwargs: Any) -> None: ...

    def add_event(self, event: dutils.EventLoop) -> None: ...

    def remove_event(self, name: str) -> Optional[dutils.EventLoop]: ...

    def load_extensions(self, extensions: Iterable) -> int: ...

    def unload_extensions(self, extensions: Optional[Iterable] = ...) -> None: ...

    def find_command(self, command: str) -> Optional[commands.Command]: ...

    def commands_dict(self) -> Dict[str, Any]: ...

def _add_command(data: Dict[str, Any], command: commands.Command) -> None: ...

def _perms_check(self: 'TalosCog', ctx: commands.Context) -> bool: ...

class TalosCog:

    __slots__ = ("bot", "database")
    bot: Talos
    database: utils.TalosDatabase

    def __new__(cls, bot: Talos): ...

    def __init__(self, bot: Talos): ...

    cog_check: ... = ...


class TalosHelpCommand(commands.HelpCommand):

    def get_destination(self) -> discord.abc.Messageable: ...

    @property
    async def clean_prefix(self) -> str: ...

    async def get_command_signature(self, command: commands.Command) -> str: ...

    async def get_starting_note(self) -> str: ...

    def normalize_cog(self, bot: Talos, name: str) -> Optional[str]: ...

    async def setup_paginator(self) -> paginators.PaginatedEmbed: ...

    async def send_bot_help(self, mapping: Dict[commands.Cog, List[commands.Command]]) -> None: ...

    async def send_cog_help(self, cog: commands.Cog) -> None: ...

    async def send_command_help(self, command: commands.Command) -> None: ...

    async def send_group_help(self, group: commands.Group) -> None: ...

    async def command_callback(self, ctx: commands.Context, *, command: Any = ...) -> None: ...
