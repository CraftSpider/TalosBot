"""
    Talos stub file for typing and such

    author: CraftSpider
"""
from typing import List, Tuple, Union, Any, Optional, Dict, Pattern
import logging
import discord
import discord.ext.commands as commands
import datetime
import mysql.connector.abstracts
import utils
import utils.dutils as dutils

SQL_ADDRESS: str = ...
TOKEN_FILE: str = ...
_mentions_transforms: Dict[str, str] = ...
_mention_pattern: Pattern = ...
log: logging.Logger = ...

class Talos(dutils.ExtendedBot):

    VERSION: str = ...
    BOOT_TIME: datetime = ...
    PROMPT_TIME: int = ...
    DEFAULT_PREFIX: str = ...
    extension_dir: str = ...
    startup_extensions: Tuple[str, ...] = ...
    DEVS: Tuple[int, ...] = ...
    SQL_ADDRESS: str = ...
    database: utils.TalosDatabase
    session: utils.TalosHTTPClient
    __tokens: Dict[str, Union[str, List[str]]]
    botlist: str

    # noinspection PyMissingConstructor
    def __init__(self, sql_conn: Optional[mysql.connector.abstracts.MySQLConnectionAbstract] = ..., **kwargs: Any) -> None: ...

    def load_extension(self, name: str, prefix: bool = ...) -> None: ...

    def unload_extension(self, name: str, prefix: bool = ...) -> None: ...

    def skip_check(self, author_id: int, self_id: int) -> bool: ...

    def should_embed(self, ctx: commands.Context) -> bool: ...

    def get_timezone(self, ctx: commands.Context) -> datetime.timezone: ...

    async def logout(self) -> None: ...

    async def close(self) -> None: ...

    async def _talos_help_command(self, ctx: commands.Context, *args: str) -> None: ...

    async def mod_log(self, ctx: commands.Context, event: str, user: Union[discord.User, discord.Member], message: str) -> bool: ...

    async def on_ready(self) -> None: ...

    async def on_guild_join(self, guild: discord.Guild) -> None: ...

    async def on_guild_remove(self, guild: discord.Guild) -> None: ...

    async def on_member_ban(self, guild: discord.Guild, user: discord.User) -> None: ...

    async def get_context(self, message: discord.Message, *, cls: type(commands.Context) = ...) -> None: ...

    async def on_command(self, ctx: commands.Context) -> None: ...

    async def on_command_error(self, ctx: commands.Context, exception: commands.CommandError) -> None: ...

def custom_creator(name: str, text: str) -> commands.Command: ...

def talos_prefix(bot: Talos, message: discord.Message) -> Union[List[str], str]: ...

def configure_logging() -> None: ...

def load_token_file(filename: str) -> Dict[str, Union[str, List[str]]]: ...

def make_token_file(filename: str) -> None: ...

def main() -> None: ...
