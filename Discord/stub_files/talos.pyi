"""
    Talos stub file for typing and such

    author: CraftSpider
"""
from typing import List, Tuple, Union, Any, Optional, Dict, Pattern
import logging
import discord
import discord.ext.commands as commands
import datetime
import mysql.connector.abstracts
import utils

SQL_ADDRESS: str = ...
TOKEN_FILE: str = ...
_mentions_transforms: Dict[str, str] = ...
_mention_pattern: Pattern = ...
log: logging.Logger = ...

class Talos(commands.Bot):

    VERSION: str = ...
    BOOT_TIME: datetime = ...
    PROMPT_TIME: int = ...
    DEFAULT_PREFIX: str = ...
    EXTENSION_DIRECTORY: str = ...
    STARTUP_EXTENSIONS: List[str] = ...
    DEVS: Tuple[int, ...] = ...
    discordbots_token: str = ...
    database: utils.TalosDatabase = ...
    session: utils.TalosHTTPClient = ...

    # noinspection PyMissingConstructor
    def __init__(self, sql_conn: Optional[mysql.connector.abstracts.MySQLConnectionAbstract] = ..., **kwargs: Any) -> None: ...

    def load_extensions(self, extensions: Optional[list] = ...) -> int: ...

    def unload_extensions(self, extensions: Optional[list] = ...) -> None: ...

    def load_extension(self, name: str, prefix: bool = ...) -> None: ...

    def unload_extension(self, name: str, prefix: bool = ...) -> None: ...

    def skip_check(self, author_id: int, self_id: int) -> bool: ...

    def should_embed(self, ctx: commands.Context) -> bool: ...

    def get_timezone(self, ctx: commands.Context) -> datetime.timezone: ...

    async def logout(self) -> None: ...

    async def close(self) -> None: ...

    async def _talos_help_command(self, ctx: commands.Context, *args: str) -> None: ...

    def run(self, token: str, *args, **kwargs) -> None: ...

    async def start(self, *args, **kwargs) -> None: ...

    async def on_ready(self) -> None: ...

    async def on_guild_join(self, guild: discord.Guild) -> None: ...

    async def on_guild_remove(self, guild: discord.Guild) -> None: ...

    async def get_context(self, message: discord.Message, *, cls: type(commands.Context) = ...) -> None: ...

    async def on_command(self, ctx: commands.Context) -> None: ...

    async def on_command_error(self, ctx: commands.Context, exception: commands.CommandError) -> None: ...

def custom_creator(name: str, text: str) -> commands.Command: ...

def talos_prefix(bot: Talos, message: discord.Message) -> Union[List[str], str]: ...

def string_load(filename: str) -> List[str]: ...

def load_token() -> str: ...

def load_botlist_token() -> str: ...

def load_nano_login() -> List[str]: ...

def load_btn_key() -> str: ...

def load_sql_data() -> List[str]: ...

def load_cat_key() -> str: ...

def main() -> None: ...
