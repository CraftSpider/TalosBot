"""
    Stub file for Talos commands

    author: CraftSpider
"""
from typing import Tuple, List, Union, Callable
from collections import defaultdict
import logging
import discord.ext.commands as commands
import datetime as dt
import utils
from Discord.talos import Talos

active_pw = ... # type: defaultdict
log = ... # type: logging.Logger

def sort_mem(member: utils.PWMember) -> dt.timedelta: ...

def strfdelta(time_delta: dt.timedelta, fmt: str) -> str: ...

def html_to_markdown(html: str) -> str: ...

class Commands(utils.TalosCog):

    noun = ... # type: List[str]
    adjective = ... # type: List[str]
    goal = ... # type: List[str]
    obstacle = ... # type: List[str]
    place = ... # type: List[str]
    place_adjective = ... # type: List[str]
    action = ... # type: List[str]
    phrases = ... # type: List[str]

    def get_uptime_days(self) -> str: ...

    def get_uptime_percent(self) -> Tuple[float, float, float]: ...

    async def information(self, ctx: commands.Context) -> None: ...

    async def tos(self, ctx: commands.Context) -> None: ...

    async def version(self, ctx: commands.Context) -> None: ...

    async def roll(self, ctx: commands.Context, dice: str) -> None: ...

    async def choose(self, ctx: commands.Context, *, choices: str) -> None: ...

    async def time(self, ctx: commands.Context) -> None: ...

    async def wordwar(self, ctx: commands.Context, length: str = ..., start: str = ..., wpm: int = ...) -> None: ...

    async def credits(self, ctx: commands.Context) -> None: ...

    async def uptime(self, ctx: commands.Context) -> None: ...

    async def ping(self, ctx: commands.Context) -> None: ...

    nanowrimo = ... # type: commands.Group

    async def _novel(self, ctx: commands.Context, username: str, novel_name: str = ...) -> None: ...

    async def _profile(self, ctx: commands.Context, username: str) -> None: ...

    generate = ... # type: commands.Group

    async def _crawl(self, ctx: commands.Context) -> None: ...

    async def _prompt(self, ctx:commands.Context) -> None: ...

    async def _name(self, ctx: commands.Context, number: int = ...) -> None: ...

    productivitywar = ... # type: commands.Group

    async def _create(self, ctx: commands.Context) -> None: ...

    async def _join(self, ctx: commands.Context) -> None: ...

    async def _start(self, ctx: commands.Context, time: str = ...) -> None: ...

    async def _leave(self, ctx: commands.Context) -> None: ...

    async def _end(self, ctx: commands.Context) -> None: ...

    async def _dump(self, ctx: commands.Context) -> None: ...

def setup(bot: Talos) -> None: ...
